# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Build and Deploy to Github Pages and DockerHub

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci
      - run: npm run build

  publish-github-pages:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # runs only when release with a new tag
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Packages
        run: npm ci
      - name: Build
        run: npm run build
      - name: Deploy to GH pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: build

  publish-docker-image:
    needs: [build, publish-github-pages]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') # runs only when release with a new tag
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract release version
      id: get_version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:${{ env.RELEASE_VERSION }} .
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:${{ env.RELEASE_VERSION }} ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:${{ env.RELEASE_VERSION }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:latest

  deploy-to-droplet:
    runs-on: ubuntu-latest
    needs: publish-docker-image
    if: startsWith(github.ref, 'refs/tags/') # runs only when release with a new tag
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DIGITALOCEAN_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_SSHKEY }}
          passphrase: ${{ secrets.DIGITALOCEAN_PASSPHRASE }}
          script: |
            docker pull skuill/portfolio:latest
            docker rm -f skuill-portfolio 
            docker run -dit --restart=always --network common-skuill-network -p 3000:80 --name skuill-portfolio skuill/portfolio:latest
  
